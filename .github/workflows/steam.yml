# yaml-language-server: $schema=https://json.schemastore.org/github-workflow.json
name: Tauri Build & (Optional) Steam Upload

on:
  push:
    tags:
      - "v*.*.*"
  workflow_dispatch:

jobs:
  build:
    name: Build ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-14, ubuntu-22.04, windows-2022]

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - uses: actions/setup-node@v4
        with:
          node-version: "20"

      - uses: dtolnay/rust-toolchain@stable

      - name: Linux deps
        if: matrix.os == 'ubuntu-22.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.1-dev \
            libayatana-appindicator3-dev librsvg2-dev patchelf rsync

      - name: Install Tauri CLI
        run: npm i -D @tauri-apps/cli

      - name: Build web (if needed) and sync to app/
        shell: bash
        run: |
          set -euo pipefail
          SRC="vendor/sixarata"
      
          # 1) Build if the game defines a build script
          if [ -f "$SRC/package.json" ] && npm --prefix "$SRC" run | grep -qE '(^|[[:space:]])build([[:space:]]|:)'; then
            npm --prefix "$SRC" ci
            npm --prefix "$SRC" run build
          fi
      
          # 2) Find an index.html to ship (common output dirs first)
          CANDIDATES=("$SRC/dist" "$SRC/build" "$SRC/out" "$SRC/public" "$SRC")
          FOUND=""
          for C in "${CANDIDATES[@]}"; do
            if [ -f "$C/index.html" ]; then FOUND="$C"; break; fi
          done
          if [ -z "$FOUND" ]; then
            echo "::group::Debug: candidate listings"
            for C in "${CANDIDATES[@]}"; do
              echo "== $C"
              ls -la "$C" 2>/dev/null | sed -n '1,120p' || true
            done
            echo "::endgroup::"
            echo "::error::No index.html found in: ${CANDIDATES[*]}"
            exit 1
          fi
      
          # 3) Copy to app/ (portable), then strip junk
          rm -rf app && mkdir -p app
          # copy contents, preserving dotfiles
          ( shopt -s dotglob nullglob; cp -R "$FOUND"/* app/ || true )
          # if above misses dotfiles on some shells, copy them explicitly:
          [ -f "$FOUND/.htaccess" ] && cp "$FOUND/.htaccess" app/ || true
      
          # remove things we never want to ship
          rm -rf app/.git app/.github app/node_modules app/src-tauri
      
          echo "Synced from: $FOUND"
          ls -la app | sed -n '1,200p'
      
          # 4) Guards
          if [ ! -f app/index.html ]; then echo "::error::app/index.html missing after sync."; exit 1; fi
          cnt=$(find app -type f | wc -l | tr -d ' ')
          if [ "$cnt" -lt 3 ]; then echo "::error::app/ has too few files ($cnt)."; exit 1; fi
  
      - name: Tauri info
        run: npx tauri info

      - name: Tauri build (verbose)
        run: npx tauri build --verbose

      - name: Show bundle tree
        run: |
          echo "== target dirs =="
          find src-tauri/target -maxdepth 4 -type d -print || true
          echo "== macOS =="
          ls -la src-tauri/target/release/bundle/macos || true
          echo "== Windows NSIS/MSI =="
          ls -la src-tauri/target/release/bundle/nsis || true
          ls -la src-tauri/target/release/bundle/msi || true
          echo "== Linux AppImage/DEB/RPM =="
          ls -la src-tauri/target/release/bundle/appimage || true
          ls -la src-tauri/target/release/bundle/deb || true
          ls -la src-tauri/target/release/bundle/rpm || true

      # upload per-OS with exact globs
      - name: Upload macOS bundle
        if: ${{ matrix.os == 'macos-14' }}
        uses: actions/upload-artifact@v4
        with:
          name: bundle-macos-14
          path: |
            src-tauri/target/release/bundle/macos/*.app
            src-tauri/target/release/bundle/macos/*.dmg
          if-no-files-found: error

      - name: Upload Windows bundle
        if: ${{ matrix.os == 'windows-2022' }}
        uses: actions/upload-artifact@v4
        with:
          name: bundle-windows-2022
          path: |
            src-tauri/target/release/bundle/nsis/*.exe
            src-tauri/target/release/bundle/msi/*.msi
          if-no-files-found: error

      - name: Upload Linux bundle
        if: ${{ matrix.os == 'ubuntu-22.04' }}
        uses: actions/upload-artifact@v4
        with:
          name: bundle-ubuntu-22.04
          path: |
            src-tauri/target/release/bundle/appimage/*.AppImage
            src-tauri/target/release/bundle/deb/*.deb
            src-tauri/target/release/bundle/rpm/*.rpm
          if-no-files-found: error

  steam:
    name: Prepare Steam folders & (optional) upload
    needs: build
    runs-on: ubuntu-22.04
    env:
      STEAM_USERNAME: ${{ secrets.STEAM_USERNAME }}
      STEAM_PASSWORD: ${{ secrets.STEAM_PASSWORD }}
    steps:
      - uses: actions/checkout@v4

      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Expand artifacts into workspace layout
        run: |
          mkdir -p src-tauri/target/release/bundle
          # macOS
          if ls artifacts/bundle-macos-14 1>/dev/null 2>&1; then
            mkdir -p src-tauri/target/release/bundle/macos
            cp -R artifacts/bundle-macos-14/* src-tauri/target/release/bundle/macos/ || true
          fi
          # Windows
          if ls artifacts/bundle-windows-2022 1>/dev/null 2>&1; then
            mkdir -p src-tauri/target/release/bundle/nsis src-tauri/target/release/bundle/msi
            cp -R artifacts/bundle-windows-2022/* src-tauri/target/release/bundle/ -v || true
          fi
          # Linux
          if ls artifacts/bundle-ubuntu-22.04 1>/dev/null 2>&1; then
            mkdir -p src-tauri/target/release/bundle/appimage src-tauri/target/release/bundle/deb src-tauri/target/release/bundle/rpm
            cp -R artifacts/bundle-ubuntu-22.04/* src-tauri/target/release/bundle/ -v || true
          fi

      - name: Install helpers
        run: sudo apt-get update && sudo apt-get install -y bash coreutils findutils p7zip-full

      - name: Gather macOS
        run: bash steam/scripts/gather_macos.sh

      - name: Gather Linux
        run: bash steam/scripts/gather_linux.sh

      - name: Gather Windows
        shell: pwsh
        run: ./steam/scripts/gather_win.ps1

      - name: Upload Steam-ready folders as artifact
        uses: actions/upload-artifact@v4
        with:
          name: steam-release-folders
          path: |
            release/osx/Sixarata/**
            release/linux/Sixarata/**
            release/win64/Sixarata/**

      - name: Upload to Steam (steamcmd in Docker)
        # optionally gate on secrets being present; VSCode may warn, but GitHub accepts it:
        # if: ${{ env.STEAM_USERNAME != '' && env.STEAM_PASSWORD != '' }}
        run: |
          docker run --rm -v "$PWD:/work" -w /work cm2network/steamcmd \
            bash -lc \
            "/home/steam/steamcmd/steamcmd.sh +login \"$STEAM_USERNAME\" \"$STEAM_PASSWORD\" +run_app_build steam/build_app.vdf +quit"
