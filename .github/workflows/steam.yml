# yaml-language-server: $schema=https://json.schemastore.org/github-workflow.json
name: Tauri Build & (Optional) Steam Upload

on:
  push:
    tags:
      - "v*.*.*"
  workflow_dispatch:

jobs:
  build:
    name: Build ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-14, ubuntu-22.04, windows-2022]

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - uses: actions/setup-node@v4
        with:
          node-version: "20"

      - uses: dtolnay/rust-toolchain@stable

      - name: Linux deps
        if: matrix.os == 'ubuntu-22.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.1-dev \
            libayatana-appindicator3-dev librsvg2-dev patchelf rsync

      - name: Install Tauri CLI
        run: npm i -D @tauri-apps/cli

      - name: Build web (if needed) and sync to app/
        shell: bash
        run: |
          set -e
          if [ -f vendor/sixarata/package.json ]; then
            npm --prefix vendor/sixarata ci
            if npm --prefix vendor/sixarata run | grep -qE '(^|\s)build(\s|:)'; then
              npm --prefix vendor/sixarata run build
              rm -rf app && mkdir app && cp -R vendor/sixarata/dist/* app/
            else
              rm -rf app && mkdir app && rsync -a --delete \
                --exclude '.git' --exclude 'node_modules' --exclude 'src-tauri' \
                vendor/sixarata/ app/
            fi
          else
            mkdir -p app
          fi
          echo "== app/ =="
          ls -la app | head -n 200

      - name: Ensure app is populated and clean
        shell: bash
        run: |
          set -euo pipefail

          # 1) app/ must exist
          if [ ! -d app ]; then
            echo "::error::app/ directory is missing. The sync/build step did not create it."
            exit 1
          fi

          # 2) must NOT contain src-tauri (misconfigured copy)
          if [ -d app/src-tauri ]; then
            echo "::group::app/ tree (top)"
            find app -maxdepth 2 -type d -print
            echo "::endgroup::"
            echo "::error::app/ contains src-tauri/. Your sync step is copying the Rust project. Exclude it (e.g., --exclude 'src-tauri')."
            exit 1
          fi

          # 3) require an index.html (static entrypoint)
          if [ ! -f app/index.html ]; then
            echo "::group::app/ listing"
            ls -la app | sed -n '1,200p'
            echo "::endgroup::"
            echo "::error::app/index.html not found. Ensure your build or rsync copied the gameâ€™s static output into app/."
            exit 1
          fi

          # 4) require a minimum number of files (helps catch empty builds)
          filecount=$(find app -type f | wc -l | tr -d ' ')
          if [ "$filecount" -lt 3 ]; then
            echo "::group::app/ listing"
            ls -la app | sed -n '1,200p'
            echo "::endgroup::"
            echo "::error::app/ has too few files ($filecount). The build likely failed or copied the wrong directory."
            exit 1
          fi

          # 5) friendly heads-up if frontendDist looks wrong (warn only)
          if ! grep -q '"frontendDist": "../app"' src-tauri/tauri.conf.json; then
            echo "::warning::src-tauri/tauri.conf.json does not contain \"frontendDist\": \"../app\". If bundle is empty, fix this."
          fi

      - name: Tauri info
        run: npx tauri info

      - name: Tauri build (verbose)
        run: npx tauri build --verbose

      - name: Show bundle tree
        run: |
          echo "== target dirs =="
          find src-tauri/target -maxdepth 4 -type d -print || true
          echo "== macOS =="
          ls -la src-tauri/target/release/bundle/macos || true
          echo "== Windows NSIS/MSI =="
          ls -la src-tauri/target/release/bundle/nsis || true
          ls -la src-tauri/target/release/bundle/msi || true
          echo "== Linux AppImage/DEB/RPM =="
          ls -la src-tauri/target/release/bundle/appimage || true
          ls -la src-tauri/target/release/bundle/deb || true
          ls -la src-tauri/target/release/bundle/rpm || true

      # upload per-OS with exact globs
      - name: Upload macOS bundle
        if: ${{ matrix.os == 'macos-14' }}
        uses: actions/upload-artifact@v4
        with:
          name: bundle-macos-14
          path: |
            src-tauri/target/release/bundle/macos/*.app
            src-tauri/target/release/bundle/macos/*.dmg
          if-no-files-found: error

      - name: Upload Windows bundle
        if: ${{ matrix.os == 'windows-2022' }}
        uses: actions/upload-artifact@v4
        with:
          name: bundle-windows-2022
          path: |
            src-tauri/target/release/bundle/nsis/*.exe
            src-tauri/target/release/bundle/msi/*.msi
          if-no-files-found: error

      - name: Upload Linux bundle
        if: ${{ matrix.os == 'ubuntu-22.04' }}
        uses: actions/upload-artifact@v4
        with:
          name: bundle-ubuntu-22.04
          path: |
            src-tauri/target/release/bundle/appimage/*.AppImage
            src-tauri/target/release/bundle/deb/*.deb
            src-tauri/target/release/bundle/rpm/*.rpm
          if-no-files-found: error

  steam:
    name: Prepare Steam folders & (optional) upload
    needs: build
    runs-on: ubuntu-22.04
    env:
      STEAM_USERNAME: ${{ secrets.STEAM_USERNAME }}
      STEAM_PASSWORD: ${{ secrets.STEAM_PASSWORD }}
    steps:
      - uses: actions/checkout@v4

      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Expand artifacts into workspace layout
        run: |
          mkdir -p src-tauri/target/release/bundle
          # macOS
          if ls artifacts/bundle-macos-14 1>/dev/null 2>&1; then
            mkdir -p src-tauri/target/release/bundle/macos
            cp -R artifacts/bundle-macos-14/* src-tauri/target/release/bundle/macos/ || true
          fi
          # Windows
          if ls artifacts/bundle-windows-2022 1>/dev/null 2>&1; then
            mkdir -p src-tauri/target/release/bundle/nsis src-tauri/target/release/bundle/msi
            cp -R artifacts/bundle-windows-2022/* src-tauri/target/release/bundle/ -v || true
          fi
          # Linux
          if ls artifacts/bundle-ubuntu-22.04 1>/dev/null 2>&1; then
            mkdir -p src-tauri/target/release/bundle/appimage src-tauri/target/release/bundle/deb src-tauri/target/release/bundle/rpm
            cp -R artifacts/bundle-ubuntu-22.04/* src-tauri/target/release/bundle/ -v || true
          fi

      - name: Install helpers
        run: sudo apt-get update && sudo apt-get install -y bash coreutils findutils p7zip-full

      - name: Gather macOS
        run: bash steam/scripts/gather_macos.sh

      - name: Gather Linux
        run: bash steam/scripts/gather_linux.sh

      - name: Gather Windows
        shell: pwsh
        run: ./steam/scripts/gather_win.ps1

      - name: Upload Steam-ready folders as artifact
        uses: actions/upload-artifact@v4
        with:
          name: steam-release-folders
          path: |
            release/osx/Sixarata/**
            release/linux/Sixarata/**
            release/win64/Sixarata/**

      - name: Upload to Steam (steamcmd in Docker)
        # optionally gate on secrets being present; VSCode may warn, but GitHub accepts it:
        # if: ${{ env.STEAM_USERNAME != '' && env.STEAM_PASSWORD != '' }}
        run: |
          docker run --rm -v "$PWD:/work" -w /work cm2network/steamcmd \
            bash -lc \
            "/home/steam/steamcmd/steamcmd.sh +login \"$STEAM_USERNAME\" \"$STEAM_PASSWORD\" +run_app_build steam/build_app.vdf +quit"
